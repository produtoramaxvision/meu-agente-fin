-- Correção CRÍTICA: Funções RPC com validação de auth.uid()
-- Remove vulnerabilidade IDOR (Insecure Direct Object Reference)
-- Data: 2025-01-26
-- Status: CORREÇÃO DE SEGURANÇA CRÍTICA

-- 1. Remover versões antigas das funções
DROP FUNCTION IF EXISTS public.export_user_data(text);
DROP FUNCTION IF EXISTS public.delete_user_data(text);

-- 2. Criar nova versão de export_user_data SEM parâmetro user_phone
CREATE OR REPLACE FUNCTION public.export_user_data()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result JSONB := '{}';
    user_data JSONB := '{}';
    user_phone_var TEXT;
BEGIN
    -- CORREÇÃO CRÍTICA: Usar auth.uid() como única fonte de verdade
    SELECT phone INTO user_phone_var
    FROM public.clientes
    WHERE auth_user_id = auth.uid();
    
    -- Verificar se o usuário está autenticado e existe
    IF user_phone_var IS NULL THEN
        RETURN jsonb_build_object(
            'success', false,
            'error', 'Usuário não autenticado ou não encontrado'
        );
    END IF;

    -- Coletar dados do usuário autenticado
    SELECT jsonb_build_object(
        'user_info', (SELECT to_jsonb(c.*) FROM public.clientes c WHERE c.auth_user_id = auth.uid()),
        'financial_records', (SELECT COALESCE(jsonb_agg(to_jsonb(fr.*)), '[]'::jsonb) FROM public.financeiro_registros fr WHERE fr.phone = user_phone_var),
        'goals', (SELECT COALESCE(jsonb_agg(to_jsonb(m.*)), '[]'::jsonb) FROM public.metas m WHERE m.phone = user_phone_var),
        'tasks', (SELECT COALESCE(jsonb_agg(to_jsonb(t.*)), '[]'::jsonb) FROM public.tasks t WHERE t.phone = user_phone_var),
        'notifications', (SELECT COALESCE(jsonb_agg(to_jsonb(n.*)), '[]'::jsonb) FROM public.notifications n WHERE n.phone = user_phone_var),
        'events', (SELECT COALESCE(jsonb_agg(to_jsonb(e.*)), '[]'::jsonb) FROM public.events e WHERE e.phone = user_phone_var),
        'calendars', (SELECT COALESCE(jsonb_agg(to_jsonb(c.*)), '[]'::jsonb) FROM public.calendars c WHERE c.phone = user_phone_var),
        'privacy_settings', (SELECT COALESCE(jsonb_agg(to_jsonb(ps.*)), '[]'::jsonb) FROM public.privacy_settings ps WHERE ps.phone = user_phone_var),
        'export_timestamp', NOW()
    ) INTO user_data;

    result := jsonb_build_object(
        'success', true,
        'data', user_data,
        'export_timestamp', NOW(),
        'message', 'Dados do usuário exportados com sucesso'
    );

    RETURN result;
END;
$$;

-- 3. Criar nova versão de delete_user_data SEM parâmetro user_phone
CREATE OR REPLACE FUNCTION public.delete_user_data()
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result JSONB := '{}';
    deleted_tables TEXT[] := '{}';
    table_name TEXT;
    user_phone_var TEXT;
    tables_to_delete TEXT[] := ARRAY[
        'privacy_settings',
        'financeiro_registros',
        'metas',
        'tasks',
        'notifications',
        'events',
        'calendars',
        'focus_blocks',
        'sync_state',
        'scheduling_links',
        'resources',
        'event_participants',
        'event_reminders',
        'event_resources',
        'ingestion_log'
    ];
BEGIN
    -- CORREÇÃO CRÍTICA: Usar auth.uid() como única fonte de verdade
    SELECT phone INTO user_phone_var
    FROM public.clientes
    WHERE auth_user_id = auth.uid();
    
    -- Verificar se o usuário está autenticado e existe
    IF user_phone_var IS NULL THEN
        RETURN jsonb_build_object(
            'success', false,
            'error', 'Usuário não autenticado ou não encontrado'
        );
    END IF;

    -- Deletar dados de cada tabela
    FOREACH table_name IN ARRAY tables_to_delete
    LOOP
        BEGIN
            EXECUTE format('DELETE FROM public.%I WHERE phone = %L', table_name, user_phone_var);
            
            IF FOUND THEN
                deleted_tables := array_append(deleted_tables, table_name);
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE WARNING 'Erro ao deletar da tabela %: %', table_name, SQLERRM;
        END;
    END LOOP;

    -- Deletar o usuário da tabela clientes por último
    DELETE FROM public.clientes WHERE auth_user_id = auth.uid();

    result := jsonb_build_object(
        'success', true,
        'deleted_tables', deleted_tables,
        'deletion_timestamp', NOW(),
        'message', 'Dados do usuário excluídos com sucesso'
    );

    RETURN result;
END;
$$;

-- 4. Adicionar comentários de documentação
COMMENT ON FUNCTION public.export_user_data() IS 'Exporta dados do usuário autenticado. SEGURO: Usa auth.uid() como fonte de verdade.';
COMMENT ON FUNCTION public.delete_user_data() IS 'Deleta dados do usuário autenticado. SEGURO: Usa auth.uid() como fonte de verdade.';

-- 5. Verificar que as funções foram criadas corretamente
SELECT 
    'Funções RPC corrigidas com sucesso' as status,
    COUNT(*) as total_functions
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public'
AND p.proname IN ('export_user_data', 'delete_user_data')
AND p.proargnames IS NULL; -- Funções sem parâmetros
