[
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "5b3e7ac2-4e8a-46c9-bb99-254813f07d3f",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC001-Phone OTP Authentication Success",
    "description": "Verify that user can successfully authenticate using phone OTP with valid phone number and OTP within rate limits.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: User authentication with phone OTP did not succeed as expected.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411768983853//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.107Z",
    "modified": "2025-10-14T03:16:09.193Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "43cf7423-392e-406f-b09c-b40a96c9f6ed",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC002-Phone OTP Authentication Rate Limiting",
    "description": "Verify system enforces rate limiting on OTP requests per phone number and IP to prevent abuse.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: OTP rate limiting enforcement could not be verified.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411771539399//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.114Z",
    "modified": "2025-10-14T03:16:11.727Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "216d57ca-74b1-4b48-8885-14f50e8d2738",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC003-Authentication with Invalid OTP",
    "description": "Verify login fails with invalid or expired OTP codes and appropriate error messages are shown.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Enter valid phone number and request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Log out to return to login page to test OTP failure\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid phone number and password, then submit to request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click logout button to return to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid phone number and password, then submit to request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click logout button to return to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid phone number and password, then submit to request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click logout button to return to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid phone number and password, then submit to request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click logout button to return to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid phone number and password, then submit to request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click logout button to return to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter valid phone number and password, then submit to request OTP\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click logout button to return to login page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/div[3]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test failed: Login did not fail as expected with invalid or expired OTP.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The task to verify login failure with invalid or expired OTP codes and appropriate error messages was not fully completed because the invalid or expired OTP input test was not performed. The login with valid phone number and password was successfully tested multiple times, and logout was performed to return to the login page. However, the step to enter an invalid or expired OTP and verify the error message was not executed. Therefore, the task is incomplete.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412391182725//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.123Z",
    "modified": "2025-10-14T03:26:31.391Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "cef62cd3-e489-46f5-bc06-af77f7f66a07",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC004-Add Income and Expense Record - Free Plan",
    "description": "Verify user on Free plan can add income and expense records with categories and view them correctly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click login button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Contas' link to navigate to financial records page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Nova Transação' button to add new income record\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select 'Entrada' (income) type, input amount, select category, set date, and save the income record.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('1000')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select a category for the income record and save it.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[4]/div/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Salvar' button to save the income record and verify it appears in the list.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[7]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Test failed: Free plan user cannot add income records as the records do not appear after saving. Stopping further testing.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412181554563//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.128Z",
    "modified": "2025-10-14T03:23:02.074Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "389e4ae4-1a06-471a-bf57-5d22162ce86b",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC005-Export Financial Data CSV/PDF - Business Plan",
    "description": "Verify that users on Business or Premium plan can export filtered financial records as CSV and PDF accurately.",
    "testStatus": "FAILED",
    "testError": "Test execution timed out after 15 minutes",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "",
    "created": "2025-10-14T03:14:40.136Z",
    "modified": "2025-10-14T03:14:40.136Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "33949625-3158-47ed-98c9-c723311d0ce9",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC006-Task Creation and Status Update",
    "description": "Verify users can create tasks with priority, category, due date and update status correctly.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click login button.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Tarefas' link to navigate to task management page.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[5]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Nova Tarefa' button to open the new task creation form.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the task title, description, select priority, enter category, and select a due date, then save the task.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test Task Priority Category')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('This task is created to test priority, category, due date, and status update.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try clicking on the category input field to focus it, then input category text. Then open the due date selector and pick a date, finally save the task.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div[5]/div[2]/div/div[4]/span/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on the category input field to focus it, then input category text 'Testing'. Then open the due date selector and select a valid due date, finally save the task.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div[5]/div[2]/div/div[2]/span/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Close the priority dropdown, input category text 'Testing' into the category field, select a due date, then save the task.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[4]/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The test to create a task with priority, category, due date, and update status was partially successful. Title, description, and priority were set correctly in the new task form. However, attempts to input the category and due date failed due to interaction issues with those fields. Consequently, the task was not saved, and the new task does not appear in the task list with all specified details. Status update could not be tested as the task creation was incomplete. Further investigation is needed to resolve input field interaction problems to fully verify task creation and status update functionality.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:08 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:08 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:09 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412377400836//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.141Z",
    "modified": "2025-10-14T03:26:17.581Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "3307fbc0-da1b-4cc0-8fe9-4bd58a923424",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC007-Goal Setting and Progress Tracking",
    "description": "Verify users can set goals and track progress visually with indicators updating based on completion.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click Entrar to login\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Metas' (Goals) link in the navigation menu to go to goals management page\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Nova Meta' button to start creating a new goal\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the 'Título da Meta' with 'Test Goal Creation', 'Valor Atual' with 0, 'Valor da Meta' with 5, select an icon, set 'Prazo (meses)' to 12, and save the goal.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Test Goal Creation')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('0')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[2]/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Select the 'Carro' icon (index 15) from the dropdown, fill in the 'Prazo (meses)' field with 12, and save the new goal.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[4]/div/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Verify that the new goal 'Test Goal Creation' is displayed in the goals list with a progress bar and visual indicator.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div[5]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Update the progress of the 'Test Goal Creation' goal to a new value and verify the progress bar and visual indicator update accordingly.\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div[2]/div[2]/span/div/div[2]/div/div[2]/div[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Tested goal creation and display with progress bar successfully. However, the progress update functionality could not be tested due to missing or inaccessible UI controls for updating progress on the goals management page. Reporting this issue and stopping further testing.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/176041221120057//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.147Z",
    "modified": "2025-10-14T03:23:31.390Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "05030c0e-4f6f-4356-82d0-d15ff9446e64",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC008-Calendar Event Creation and Reminders",
    "description": "Verify users can create calendar events with details, view events in different calendar views, and receive reminders if enabled.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411811749731//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.152Z",
    "modified": "2025-10-14T03:16:51.893Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "e641e4b7-802c-4e13-9af4-20e845dacff9",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC009-AI Sub-Agent Interaction - Business Plan",
    "description": "Verify AI sub-agents respond correctly to WhatsApp commands for financial management, scheduling, marketing, and development support as per Business plan entitlements.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click Entrar button to login\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Simulate WhatsApp message to AI financial agent requesting record addition\n        await page.goto('http://localhost:8080/whatsapp-simulator', timeout=10000)\n        \n\n        # Click 'Return to Home' link to go back to dashboard or home page and find correct navigation to WhatsApp simulation or AI sub-agent testing interface\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Dashboard page is not loading properly, stuck on loading spinner. Unable to proceed with testing WhatsApp commands for AI sub-agents. Reporting the issue and stopping further testing.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:05 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411931555592//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.157Z",
    "modified": "2025-10-14T03:18:51.700Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "728884db-7e2d-4026-9feb-2bff2852b18b",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC010-AI Sub-Agent Inactive in Free Plan",
    "description": "Verify that AI sub-agent features are inactive or inaccessible for Free and Basic plan users.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test failed: AI sub-agent features should be inactive or inaccessible for Free and Basic plan users.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411766423626//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.162Z",
    "modified": "2025-10-14T03:16:06.601Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "60c04897-a050-4cef-8be9-c1829b20ceff",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC011-Support Ticket Creation and Tracking - Premium Plan",
    "description": "Verify users on Business or Premium plans can create support tickets, track status, and receive priority handling appropriately.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411772945016//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.168Z",
    "modified": "2025-10-14T03:16:13.073Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "bdb08ba9-3a6c-4b57-afdf-d9f1e9851aad",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC012-Plan Upgrade Unlocks Features",
    "description": "Verify that upgrading subscription plan enables access to new features like dedicated WhatsApp number, export functionality, and AI sub-agents.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click Entrar to login as Basic plan user\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to access a premium feature such as financial export or AI sub-agent usage to verify access restriction\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[6]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Try to click the 'Exportar' button to test if export functionality is accessible or restricted for Basic plan user\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div/div[2]/div/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Attempt to use export functionality by clicking on 'Exportar PDF' to check if export is allowed or if upgrade prompt appears\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[2]/div/div').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to AI sub-agent feature to test access restriction for Basic plan user\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[8]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Planos' tab to access subscription plan options and perform plan upgrade to Business or Premium\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[5]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Fazer Upgrade' button for Business plan to upgrade subscription\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[3]/div/div[4]/div[4]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the 'Fazer Upgrade' button for the Business plan to initiate the upgrade process\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[3]/div/div[4]/div[4]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion as expected result is unknown.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Upgrade button for Business plan is not working, blocking verification of premium feature access after upgrade. Task stopped due to this issue.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:06 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:07 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412320866447//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.175Z",
    "modified": "2025-10-14T03:25:21.103Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "187b3392-3ad2-415f-9f28-fa156787d324",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC013-Backup Execution and Integrity Validation - Premium Plan",
    "description": "Verify that data backup tasks run daily for Premium plan users and backups are completed successfully with data integrity confirmed.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click login button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to backup settings or backup management page to verify backup tasks and trigger manual backup\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[8]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on Backup tab to access backup settings and options\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Criar Backup Manual' button to trigger a manual backup and verify it completes without error\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Download the latest manual backup file to verify data integrity and completeness\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[3]/div[2]/div/div/div/div/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Assert backup summary shows all backups completed\n        backup_summary = await frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[1]/div').innerText()\n        assert 'total_backups' in backup_summary or 'completed_backups' in backup_summary or 'Concluído' in backup_summary, 'Backup summary does not indicate completed backups',\n        # Assert last backup status is 'Concluído' (Completed)\n        backup_history_items = await frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[1]/div').allInnerTexts()\n        assert any('Concluído' in item for item in backup_history_items), 'No completed backup found in backup history',\n        # Assert automatic daily backups exist and are completed\n        assert any('Automático' in item and 'Concluído' in item for item in backup_history_items), 'No completed automatic daily backup found',\n        # Assert manual backup creation button is visible and enabled\n        manual_backup_button = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[2]/button')\n        assert await manual_backup_button.is_enabled(), 'Manual backup button is not enabled',\n        # Assert backup data integrity by checking backup sizes are non-zero and consistent\n        backup_sizes = []\n        for item in backup_history_items:\n            # Extract size from string, example: '2.71 MB'\n            import re\n            match = re.search(r'\\d+\\.\\d+ MB', item)\n            if match:\n                size_str = match.group(0).replace(' MB', '')\n                size = float(size_str)\n                backup_sizes.append(size)\n        assert all(size > 0 for size in backup_sizes), 'One or more backup files have zero size, indicating possible corruption'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412082484173//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.182Z",
    "modified": "2025-10-14T03:21:22.653Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "ef695e69-c488-4d88-a81e-6df9f4505c49",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC014-Enforcement of LGPD Consent and Privacy Settings",
    "description": "Verify that user consent is required and managed before personal data processing and that privacy options including opt-out are respected.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password and click Entrar to attempt login and check for consent prompt\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to profile or privacy settings page to check for consent management and privacy options\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[8]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Privacidade' tab to check user consent management and privacy options\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Toggle off 'Processamento de Dados' (index 26) and 'E-mails de Marketing' (index 28) to simulate opt-out, then save settings by clicking 'Salvar Configurações' (index 31)\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[2]/div/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[2]/div/div[7]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[2]/div[2]/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Deletar Todos os Dados' button (index 34) to test data deletion functionality and system response\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[3]/div[2]/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Deletar Todos os Dados' button (index 34) again to confirm data deletion and observe system response\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div[2]/div/div/div[3]/div[2]/div[2]/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: user consent and privacy options verification could not be completed.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "User consent management and privacy options were verified. Consent toggles can be modified and saved. However, the data deletion functionality does not provide any confirmation or indication of success, which is a critical issue. No initial consent prompt was observed before login, which may also be a compliance concern. Task stopped and issue reported.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:15 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412201017032//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.187Z",
    "modified": "2025-10-14T03:23:21.188Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "f1ea9b45-c1c9-43be-afcf-d6bb26a3f37a",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC015-Google Workspace Integration Functionality",
    "description": "Verify correct and secure integration with Google Calendar and Drive for event syncing and document handling when enabled.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click Entrar to login\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to profile or settings to enable Google Workspace integration\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[8]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Locate and enable Google Workspace integration option in profile or settings\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Scroll down the 'Configurações' page to locate Google Workspace integration option or related toggles\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Scroll down further or search for any links or buttons related to Google Workspace, Google Calendar, or Google Drive integration\n        await page.mouse.wheel(0, window.innerHeight)\n        \n\n        # Check other tabs in profile such as 'Privacidade' or 'Backup' for Google Workspace integration settings\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Check 'Backup' tab in profile for Google Workspace integration settings\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[3]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Return to 'Configurações' tab and look for expandable menus, links, or buttons related to integrations or connected apps\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div/div[2]/div/div/div/button[4]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Navigate to main dashboard or other main menu sections to look for Google Workspace integration settings\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click on 'Agenda' tab to check for Google Calendar integration settings or options\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[2]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click 'Novo Evento' button to open the form for creating a new calendar event\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/main/div/div/div[3]/div[2]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Fill in the event form with test data and save the event to verify syncing with Google Calendar\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Teste de Integração Google Calendar')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/div[2]/textarea').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Evento para verificar a integração com Google Calendar.')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/form/div/div[2]/div[3]/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Close the date picker and click 'Salvar' to save the event and verify it appears in Google Calendar\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div[3]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Proceed to upload or link a document from Google Drive via Meu Agente interface to verify document handling and permissions\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div/aside/nav/a[8]').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "The task to verify correct and secure integration with Google Calendar and Drive for event syncing and document handling was partially completed. We successfully logged in, navigated through profile and settings, but did not find an explicit toggle or option to enable Google Workspace integration. Despite this, we created and saved a calendar event in the Meu Agente app, which should sync with Google Calendar if integration is active. However, we could not verify the event's appearance in Google Calendar directly within the app. We did not perform the document upload or linking from Google Drive due to lack of visible UI elements for this feature. Therefore, the integration verification is incomplete and requires further access or UI support to fully confirm document handling and permissions. Task success is set to false due to incomplete verification.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:11 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412409821068//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.193Z",
    "modified": "2025-10-14T03:26:50.091Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "e0da5946-13c2-4422-ba43-f92fdf7ab6f3",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC016-Real-time Notification System Functionality",
    "description": "Verify that notifications appear in real-time with correct content through bell icon dropdown and user can mark as read or dismiss.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411772005831//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.198Z",
    "modified": "2025-10-14T03:16:12.181Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "b83e0fa3-c790-455a-b00f-28b826cfa7ea",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC017-Dark and Light Theme Toggle Responsiveness",
    "description": "Verify that the theme switch correctly toggles between dark and light modes and UI components respond accordingly across devices.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click login button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Click the theme switch button to toggle to light mode and verify UI updates\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/header/div[2]/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Resize browser or simulate different device form factors to verify theme persistence and UI responsiveness\n        await page.goto('http://localhost:8080/dashboard', timeout=10000)\n        \n\n        # Try to reload the dashboard page to recover from loading issue\n        await page.goto('http://localhost:8080/dashboard', timeout=10000)\n        \n\n        # Input phone number and password, then click login button to login again\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Retry login by clearing inputs and re-entering credentials, then clicking login button again\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        assert False, 'Test plan execution failed: generic failure assertion.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Testing stopped due to critical login issue blocking access to dashboard and theme switch verification. Reported the issue for developer review.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:13 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760412107883137//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.204Z",
    "modified": "2025-10-14T03:21:48.015Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "1b4c7716-e04f-4201-9637-659bd282e5c5",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC018-Global Search and Filtering Across Modules",
    "description": "Verify that global search input returns relevant results filtered properly across financial, task, goals, and calendar modules.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        # Input phone number and password, then click login button\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('5511949746110')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/div/div[2]/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('12345678')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/main/div/div[2]/form/button').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Enter a search query in the global search input that should match records in multiple modules (finance, tasks, goals, calendar)\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/header/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.fill('Salário')\n        \n\n        frame = context.pages[-1]\n        elem = frame.locator('xpath=html/body/div/div[2]/div[2]/header/div/form/div/input').nth(0)\n        await page.wait_for_timeout(3000); await elem.click(timeout=5000)\n        \n\n        # Final generic failing assertion since expected result is unknown\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Tested global search input with query 'Salário' after successful login. No relevant results or filtering appeared across financial, task, goals, and calendar modules as expected. Reporting this as a website issue and stopping further testing.\nBrowser Console Logs:\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[WARNING] useAgendaData: Datas inválidas ou iguais: {startDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time), endDate: Tue Oct 14 2025 03:16:12 GMT+0000 (Coordinated Universal Time)} (at http://localhost:8080/src/hooks/useAgendaData.ts:97:24)\n[ERROR] 🚨 LOOP INFINITO DETECTADO! Bloqueando requisições por 5 segundos (at http://localhost:8080/src/hooks/useAgendaData.ts:84:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)\n[WARNING] useAgendaData: Requisição bloqueada temporariamente (at http://localhost:8080/src/hooks/useAgendaData.ts:77:28)",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411976956659//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.209Z",
    "modified": "2025-10-14T03:19:37.103Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "ecc4aef8-1dd0-4c31-9c7a-ec6c2dd306fb",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC019-Video Content Generation Request - Business Plan",
    "description": "Verify that Business and Premium plan users can request video content generation via WhatsApp AI Video agent and receive confirmation.",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: expected result unknown, forcing failure.'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411769300675//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.215Z",
    "modified": "2025-10-14T03:16:09.500Z"
  },
  {
    "projectId": "07778ff7-3d99-4338-b6f6-3ebe4abc57b3",
    "testId": "78513afb-73ce-4864-a4e2-b5717de7e880",
    "userId": "84b834b8-f061-70f9-a065-b85cceed669a",
    "title": "TC020-UI Responsiveness and Accessibility Check",
    "description": "Verify that the user interface is responsive on various screen sizes and meets accessibility standards (e.g., keyboard navigation, ARIA roles).",
    "code": "import asyncio\nfrom playwright import async_api\n\nasync def run_test():\n    pw = None\n    browser = None\n    context = None\n    \n    try:\n        # Start a Playwright session in asynchronous mode\n        pw = await async_api.async_playwright().start()\n        \n        # Launch a Chromium browser in headless mode with custom arguments\n        browser = await pw.chromium.launch(\n            headless=True,\n            args=[\n                \"--window-size=1280,720\",         # Set the browser window size\n                \"--disable-dev-shm-usage\",        # Avoid using /dev/shm which can cause issues in containers\n                \"--ipc=host\",                     # Use host-level IPC for better stability\n                \"--single-process\"                # Run the browser in a single process mode\n            ],\n        )\n        \n        # Create a new browser context (like an incognito window)\n        context = await browser.new_context()\n        context.set_default_timeout(5000)\n        \n        # Open a new page in the browser context\n        page = await context.new_page()\n        \n        # Navigate to your target URL and wait until the network request is committed\n        await page.goto(\"http://localhost:8080\", wait_until=\"commit\", timeout=10000)\n        \n        # Wait for the main page to reach DOMContentLoaded state (optional for stability)\n        try:\n            await page.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n        except async_api.Error:\n            pass\n        \n        # Iterate through all iframes and wait for them to load as well\n        for frame in page.frames:\n            try:\n                await frame.wait_for_load_state(\"domcontentloaded\", timeout=3000)\n            except async_api.Error:\n                pass\n        \n        # Interact with the page elements to simulate user flow\n        assert False, 'Test plan execution failed: generic failure assertion'\n        await asyncio.sleep(5)\n    \n    finally:\n        if context:\n            await context.close()\n        if browser:\n            await browser.close()\n        if pw:\n            await pw.stop()\n            \nasyncio.run(run_test())\n    ",
    "testStatus": "FAILED",
    "testError": "Failed to go to the start URL. Err: Error executing action go_to_url: Page.goto: Timeout 60000ms exceeded.\nCall log:\n  - navigating to \"http://localhost:8080/\", waiting until \"load\"\n",
    "testType": "FRONTEND",
    "createFrom": "mcp",
    "testVisualization": "https://testsprite-videos.s3.us-east-1.amazonaws.com/84b834b8-f061-70f9-a065-b85cceed669a/1760411768162836//tmp/test_task/result.webm",
    "created": "2025-10-14T03:14:40.221Z",
    "modified": "2025-10-14T03:16:08.293Z"
  }
]
