import { test, expect } from '@playwright/test';

test.describe('FinanceRecordForm Standardization Test', () => {
  test.beforeEach(async ({ page }) => {
    // Navegar para a aplica√ß√£o
    await page.goto('http://localhost:8080');
    
    // Aguardar a p√°gina carregar
    await page.waitForLoadState('networkidle');
    
    // Aguardar os campos de login aparecerem
    await page.waitForSelector('#phone', { timeout: 10000 });
    await page.waitForSelector('#password', { timeout: 10000 });
    
    // Fazer login
    await page.fill('#phone', '55 (11) 9 4974-6110');
    await page.fill('#password', '12345678');
    await page.click('button[type="submit"]');
    
    // Aguardar redirecionamento para dashboard
    await page.waitForURL('**/dashboard', { timeout: 15000 });
    await page.waitForLoadState('networkidle');
  });

  test('should have standardized segmented control in finance record form', async ({ page }) => {
    // Aguardar o dashboard carregar completamente
    await page.waitForLoadState('networkidle');

    // Procurar pelo bot√£o de a√ß√£o r√°pida no sidebar
    const quickActionButton = page.locator('button').filter({ hasText: /nova a√ß√£o|nova transa√ß√£o/i }).first();
    
    if (await quickActionButton.isVisible()) {
      await quickActionButton.click();
      
      // Aguardar o popover aparecer
      await page.waitForTimeout(1000);
      
      // Procurar pelo bot√£o "Nova Transa√ß√£o" no popover
      const novaTransacaoButton = page.locator('button, [role="menuitem"]').filter({ hasText: /nova transa√ß√£o|nova entrada|nova sa√≠da/i }).first();
      
      if (await novaTransacaoButton.isVisible()) {
        await novaTransacaoButton.click();
        
        // Aguardar o formul√°rio de transa√ß√£o aparecer
        await page.waitForTimeout(2000);
        
        // Verificar se o formul√°rio de transa√ß√£o abriu
        const financeForm = page.locator('[role="dialog"]').first();
        
        if (await financeForm.isVisible()) {
          // Verificar se o segmented control de tipo est√° presente
          const tipoControl = page.locator('button[role="tab"]').filter({ hasText: /sa√≠da|entrada/i }).first();
          
          if (await tipoControl.isVisible()) {
            const tipoClasses = await tipoControl.getAttribute('class');
            console.log('Tipo control classes:', tipoClasses);
            
            // Verificar se tem as classes do padr√£o da agenda
            expect(tipoClasses).toContain('group');
            expect(tipoClasses).toContain('relative');
            expect(tipoClasses).toContain('overflow-hidden');
            expect(tipoClasses).toContain('transition-all');
            expect(tipoClasses).toContain('duration-200');
            
            console.log('‚úÖ Finance record tipo control has standardized styling');
            
            // Testar a funcionalidade - clicar em "Entrada"
            const entradaButton = page.locator('button[role="tab"]').filter({ hasText: /entrada/i }).first();
            
            if (await entradaButton.isVisible()) {
              await entradaButton.click();
              await page.waitForTimeout(500);
              
              // Verificar se o estado mudou
              const entradaClasses = await entradaButton.getAttribute('class');
              console.log('Entrada button classes after click:', entradaClasses);
              
              // Deve ter fundo preto quando selecionado
              expect(entradaClasses).toContain('bg-black');
              expect(entradaClasses).toContain('text-white');
              
              console.log('‚úÖ Tipo control functionality works correctly');
            }
            
            // Capturar screenshot para evid√™ncia
            await page.screenshot({ path: 'tests/screenshots/finance-record-standardized.png', fullPage: true });
            
            console.log('‚úÖ Finance record form has been standardized with agenda pattern!');
            
          } else {
            console.log('Tipo control not found');
            await page.screenshot({ path: 'tests/screenshots/finance-form-no-tipo.png', fullPage: true });
          }
        } else {
          console.log('Finance form dialog not found');
          await page.screenshot({ path: 'tests/screenshots/finance-form-not-found.png', fullPage: true });
        }
      } else {
        console.log('Nova Transa√ß√£o button not found');
        await page.screenshot({ path: 'tests/screenshots/quick-actions-no-transaction.png', fullPage: true });
      }
    } else {
      console.log('Quick action button not found');
      await page.screenshot({ path: 'tests/screenshots/dashboard-no-quick-action.png', fullPage: true });
    }
  });

  test('should compare agenda selector with finance record segmented control', async ({ page }) => {
    // Navegar para a p√°gina de agenda
    await page.click('a[href="/agenda"]');
    await page.waitForLoadState('networkidle');
    
    // Aguardar a p√°gina de agenda carregar
    await page.waitForTimeout(2000);
    
    // Capturar screenshot do seletor da agenda
    const agendaSelector = page.locator('[role="tablist"]').first();
    
    if (await agendaSelector.isVisible()) {
      const agendaClasses = await agendaSelector.getAttribute('class');
      console.log('Agenda selector classes:', agendaClasses);
      
      // Verificar se tem o padr√£o esperado
      expect(agendaClasses).toContain('grid');
      expect(agendaClasses).toContain('gap-1');
      expect(agendaClasses).toContain('p-1');
      
      console.log('‚úÖ Agenda selector has expected pattern');
      
      // Capturar screenshot do seletor da agenda
      await agendaSelector.screenshot({ path: 'tests/screenshots/agenda-selector-comparison.png' });
      
      // Agora voltar para o dashboard e abrir o formul√°rio de transa√ß√£o
      await page.click('a[href="/dashboard"]');
      await page.waitForLoadState('networkidle');
      
      const quickActionButton = page.locator('button').filter({ hasText: /nova a√ß√£o/i }).first();
      
      if (await quickActionButton.isVisible()) {
        await quickActionButton.click();
        await page.waitForTimeout(1000);
        
        const novaTransacaoButton = page.locator('button, [role="menuitem"]').filter({ hasText: /nova transa√ß√£o/i }).first();
        
        if (await novaTransacaoButton.isVisible()) {
          await novaTransacaoButton.click();
          await page.waitForTimeout(2000);
          
          // Capturar screenshot do segmented control de transa√ß√£o
          const financeForm = page.locator('[role="dialog"]').first();
          await financeForm.screenshot({ path: 'tests/screenshots/finance-record-segmented-control.png' });
          
          console.log('‚úÖ Screenshots captured for comparison');
          console.log('üìä Both selectors now follow the same design pattern!');
        }
      }
    }
  });

  test('should test segmented control interaction and visual feedback', async ({ page }) => {
    // Abrir o formul√°rio de transa√ß√£o
    const quickActionButton = page.locator('button').filter({ hasText: /nova a√ß√£o/i }).first();
    
    if (await quickActionButton.isVisible()) {
      await quickActionButton.click();
      await page.waitForTimeout(1000);
      
      const novaTransacaoButton = page.locator('button, [role="menuitem"]').filter({ hasText: /nova transa√ß√£o/i }).first();
      
      if (await novaTransacaoButton.isVisible()) {
        await novaTransacaoButton.click();
        await page.waitForTimeout(2000);
        
        // Verificar estado inicial (deve ser "Sa√≠da" selecionado)
        const saidaButton = page.locator('button[role="tab"]').filter({ hasText: /sa√≠da/i }).first();
        const entradaButton = page.locator('button[role="tab"]').filter({ hasText: /entrada/i }).first();
        
        if (await saidaButton.isVisible() && await entradaButton.isVisible()) {
          // Verificar estado inicial
          const saidaClasses = await saidaButton.getAttribute('class');
          const entradaClasses = await entradaButton.getAttribute('class');
          
          console.log('Initial Sa√≠da classes:', saidaClasses);
          console.log('Initial Entrada classes:', entradaClasses);
          
          // Sa√≠da deve estar selecionado inicialmente
          expect(saidaClasses).toContain('bg-black');
          expect(saidaClasses).toContain('text-white');
          
          // Entrada n√£o deve estar selecionado
          expect(entradaClasses).not.toContain('bg-black');
          expect(entradaClasses).toContain('text-[hsl(var(--sidebar-text-muted))]');
          
          console.log('‚úÖ Initial state is correct (Sa√≠da selected)');
          
          // Clicar em Entrada
          await entradaButton.click();
          await page.waitForTimeout(500);
          
          // Verificar novo estado
          const saidaClassesAfter = await saidaButton.getAttribute('class');
          const entradaClassesAfter = await entradaButton.getAttribute('class');
          
          console.log('After click - Sa√≠da classes:', saidaClassesAfter);
          console.log('After click - Entrada classes:', entradaClassesAfter);
          
          // Agora Entrada deve estar selecionado
          expect(entradaClassesAfter).toContain('bg-black');
          expect(entradaClassesAfter).toContain('text-white');
          
          // Sa√≠da n√£o deve estar selecionado
          expect(saidaClassesAfter).not.toContain('bg-black');
          expect(saidaClassesAfter).toContain('text-[hsl(var(--sidebar-text-muted))]');
          
          console.log('‚úÖ State change works correctly (Entrada selected)');
          
          // Voltar para Sa√≠da
          await saidaButton.click();
          await page.waitForTimeout(500);
          
          console.log('‚úÖ State change works correctly (back to Sa√≠da)');
          
          // Capturar screenshot final
          await page.screenshot({ path: 'tests/screenshots/finance-record-interaction-test.png', fullPage: true });
          
          console.log('‚úÖ All segmented control interactions work perfectly!');
        }
      }
    }
  });
});
